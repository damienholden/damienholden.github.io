{"version":3,"sources":["widgets/weather/index.js","widgets/countdown/index.js","index.js"],"names":["request_url","CountdownWidget","props","then","Date","today","count","Math","abs","round","state","setInterval","setState","className","this","React","Component","request","require","cityName","WeatherWidget","weather","mounted","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","console","log","get","err","resp","body","data","JSON","parse","response","list","city","weatherData","map","day","dayObj","dt_txt","getDay","temp","main","icon","arr","push","catch","error","weekdays","humanText","index","key","src","widgets","render","document","getElementById"],"mappings":"qPAGIA,E,iECFSC,EAAb,YACE,WAAYC,GAAQ,IAAD,sBACjB,4CAAMA,IACN,IAAMC,EAAO,IAAIC,KAAK,eAChBC,EAAQ,IAAID,KACZE,EAAQC,KAAKC,IAAID,KAAKE,OAAOJ,EAAQF,GAAT,QAJjB,OAKjB,EAAKO,MAAQ,CACXJ,MAAOA,GANQ,EADrB,iFAUuB,IAAD,OAClBK,aAAY,WACV,IAAMR,EAAO,IAAIC,KAAK,eAChBC,EAAQ,IAAID,KACZE,EAAQC,KAAKC,IACjBD,KAAKE,OAAOJ,EAAQF,GAAT,QAGb,EAAKS,SAAS,CACZN,MAAOA,MAER,QArBP,+BAwBI,OACE,yBAAKO,UAAU,gCACb,yBAAKA,UAAU,WAAf,kBACA,yBAAKA,UAAU,SAASC,KAAKJ,MAAMJ,OACnC,yBAAKO,UAAU,QAAf,aA5BR,GAAqCE,IAAMC,WDArCC,EAAUC,EAAQ,KACpBC,EAAW,GA6BFC,EAAb,YACE,WAAYlB,GAAQ,IAAD,8BACjB,4CAAMA,KAEDQ,MAAQ,CACXW,QAAS,IAJM,EADrB,iFASuB,IAAD,OAClBP,KAAKQ,SAAU,EACXR,KAAKQ,SApCJ,IAAIC,SAAQ,SAACC,EAASC,GAC3BzB,EAAW,2EAHU,mCAGV,iBACP0B,UAAUC,cACZD,UAAUC,YAAYC,oBAGxB,SAAsBC,GACjBA,EAASC,SACd9B,EAAW,8DAA0D6B,EAASC,OAAOC,SAA1E,gBAA0FF,EAASC,OAAOE,UAA1G,6BAVU,mCAUV,kBAEVC,QAAQC,IAAIlC,MANXiC,QAAQC,IAAI,gBAAkBR,UAAUC,YAAYC,qBAUhDX,EAAQkB,IAAInC,GAAa,SAACoC,EAAKC,EAAMC,GACrCF,GAAKX,EAAOW,GAChB,IAAIG,EAAOC,KAAKC,MAAMH,GACtBL,QAAQC,IAAIK,GACZ,IAAIG,EAAW,CAACH,EAAKI,KAAK,GAAIJ,EAAKI,KAAK,GAAIJ,EAAKI,KAAK,KACtDxB,EAAWoB,EAAKK,KAAL,KACXpB,EAAQkB,SAkBLvC,MAAK,SAAA0C,GACJA,EAAYC,KAAI,SAAAC,GACd,IAAMC,EAAS,CACbD,IAAK,IAAI3C,KAAK2C,EAAIE,QAAQC,SAAW,EACrCC,KAAMJ,EAAIK,KAAKD,KACfE,KAAMN,EAAI1B,QAAQ,GAAGgC,MAEvB,EAAKzC,SAAS,CACZ0C,IAAK,EAAK5C,MAAMW,QAAQkC,KAAKP,WAIlCQ,OAAM,SAAAC,GACLxB,QAAQC,IAAR,sBAAmCuB,QA1B7C,6CAgCI3C,KAAKQ,SAAU,IAhCnB,+BAoCI,IAAMuB,EAAc/B,KAAKJ,MAAMW,QAEzBqC,EAAW,CACf,SACA,UACA,YACA,WACA,SACA,WACA,UAEIC,EAAY,CAAC,QAAS,YAE5B,OACE,yBAAK9C,UAAU,kBACb,yBAAKA,UAAU,WAAf,eAAsCM,GAErC0B,EAAYC,KAAI,SAACC,EAAKa,GAAN,OACf,yBAAK/C,UAAU,QAAQgD,IAAKD,GAC1B,yBAAK/C,UAAU,iBACZ+C,EAAQ,EAAID,EAAUC,GAASF,EAASX,EAAIA,MAE/C,yBAAKlC,UAAU,iBACb,yBACEiD,IAAG,2CAAsCf,EAAIM,KAA1C,cAGP,yBAAKxC,UAAU,QAAQN,KAAKE,MAAMsC,EAAII,MAAtC,iBA/DZ,GAAmCpC,IAAMC,WE1BnC+C,EAAU,CAAC,gBAAC,EAAD,MAAmB,gBAAC,EAAD,OACpCC,iBAAOD,EAASE,SAASC,eAAe,W","file":"static/js/main.30813d71.chunk.js","sourcesContent":["import React from \"react\";\r\nconst request = require(\"request\");\r\nvar cityName = \"\";\r\nvar request_url;\r\nconst OPEN_WEATHER_API = \"e16828cc9474d70f6316405aa0b3a2a2\"; //get Openweather api from https://openweathermap.org/api\r\nconst getWeather = () => {\r\n  return new Promise((resolve, reject) => {\r\n    request_url = `http://api.openweathermap.org/data/2.5/forecast?id=2964574&appid=${OPEN_WEATHER_API}&units=metric`;\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(showPosition);\r\n      console.log('coodorinates:' + navigator.geolocation.getCurrentPosition )\r\n    }\r\n    function showPosition(position) {\r\n     if (position.coords) {\r\n    request_url = `http://api.openweathermap.org/data/2.5/forecast?lat=${position.coords.latitude}&lon=${position.coords.longitude}&id=2964574&appid=${OPEN_WEATHER_API}&units=metric`;\r\n     }\r\n     console.log(request_url);\r\n    }\r\n    \r\n\r\n    http: request.get(request_url, (err, resp, body) => {\r\n      if (err) reject(err);\r\n      let data = JSON.parse(body);\r\n      console.log(data);\r\n      let response = [data.list[1], data.list[9], data.list[17]];\r\n      cityName = data.city[\"name\"];\r\n      resolve(response);\r\n    });\r\n  });\r\n};\r\n\r\nexport class WeatherWidget extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      weather: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.mounted = true;\r\n    if (this.mounted) {\r\n      getWeather()\r\n        .then(weatherData => {\r\n          weatherData.map(day => {\r\n            const dayObj = {\r\n              day: new Date(day.dt_txt).getDay() - 1,\r\n              temp: day.main.temp,\r\n              icon: day.weather[0].icon\r\n            };\r\n            this.setState({\r\n              arr: this.state.weather.push(dayObj)\r\n            });\r\n          });\r\n        })\r\n        .catch(error => {\r\n          console.log(`Encountered error: `, error);\r\n        });\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.mounted = false;\r\n  }\r\n\r\n  render() {\r\n    const weatherData = this.state.weather;\r\n\r\n    const weekdays = [\r\n      \"Monday\",\r\n      \"Tuesday\",\r\n      \"Wednesday\",\r\n      \"Thursday\",\r\n      \"Friday\",\r\n      \"Saturday\",\r\n      \"Sunday\"\r\n    ];\r\n    const humanText = [\"Today\", \"Tomorrow\"];\r\n\r\n    return (\r\n      <div className=\"widget weather\">\r\n        <div className=\"heading\">Weather in: {cityName}</div>\r\n\r\n        {weatherData.map((day, index) => (\r\n          <div className=\"group\" key={index}>\r\n            <div className=\"group-heading\">\r\n              {index < 2 ? humanText[index] : weekdays[day.day]}\r\n            </div>\r\n            <div className=\"group-content\">\r\n              <img\r\n                src={`http://openweathermap.org/img/wn/${day.icon}@2x.png`}\r\n              />\r\n            </div>\r\n            <div className=\"temp\">{Math.round(day.temp)}Â°</div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nexport class CountdownWidget extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const then = new Date(\"2020, 3, 14\");\r\n    const today = new Date();\r\n    const count = Math.abs(Math.round((today - then) / (1000 * 60 * 60 * 24)));\r\n    this.state = {\r\n      count: count\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    setInterval(() => {\r\n      const then = new Date(\"2020, 3, 14\");\r\n      const today = new Date();\r\n      const count = Math.abs(\r\n        Math.round((today - then) / (1000 * 60 * 60 * 24))\r\n      );\r\n\r\n      this.setState({\r\n        count: count\r\n      });\r\n    }, 36000);\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"widget countdown fl w-25 pa2\">\r\n        <div className=\"heading\">Sri Lanka Trip</div>\r\n        <div className=\"count\">{this.state.count}</div>\r\n        <div className=\"meta\">Days</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import * as React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport { CountdownWidget } from \"./widgets/countdown\";\r\nimport { WeatherWidget } from \"./widgets/weather\";\r\n\r\nconst widgets = [<WeatherWidget />, <CountdownWidget />];\r\nrender(widgets, document.getElementById(\"root\"));\r\n\r\nif (module.hot) {\r\n  module.hot.accept();\r\n}\r\n"],"sourceRoot":""}